import socket
import ssl
import argparse

def check_heartbleed(ip, port):
    try:
        context = ssl.create_default_context()
        with socket.create_connection((ip, port)) as sock:
            with context.wrap_socket(sock, server_hostname=ip) as ssock:
                ssock.sendall(b'\x18\x03\x02\x00\x01\x01\x40\x00')
                response = ssock.recv(1024)
                if b'heartbeat' in response:
                    print(f"{ip}:{port} is vulnerable to Heartbleed.")
                else:
                    print(f"{ip}:{port} is not vulnerable to Heartbleed.")
    except Exception as e:
        print(f"Error checking {ip}:{port}: {e}")

def main():
    parser = argparse.ArgumentParser(description="Simple vulnerability scanner.")
    parser.add_argument("target", help="Target host to scan.")
    parser.add_argument("port", type=int, help="Port to check for vulnerabilities.")
    args = parser.parse_args()

    target = args.target
    port = args.port

    check_heartbleed(target, port)

if __name__ == "__main__":
    main()
